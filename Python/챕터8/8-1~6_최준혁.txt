1. 가능하다

100 - 3 - 1
     l    l- 2
     l
     - 10

2. 아니다

마지막 원소의 이전 원소가 더 작을수도 있다

3. 

맨 마지막 노드부터 거꾸로 올라가면서 자식 노드가 있는 노드인지 검사한다.

노드가 (2^k) -1 개라면 마지막줄과 그 윗줄의 제일 오른쪽인 2^(k -1) + 1개는 스며내리기할지 판단하고 나머지인 2^(k -1) -2개는 무조건 스며내리기를 한다.

4. 

최선의 경우 2번째 층의 원소를 비교하고 그중 큰것을 루트와 비교했는데 루트가 더 큰 경우이다. 2번 비교하므로 (세타)2  ## 상수 시간이므로 (세타)1??

최악의 경우 주어진 원소가 끝까지 내려간다. 전체 층을  [ log2(n) ] 이라고 하면 층당 2번 비교하므로 (세타)[ log2(n) ] 또는 (세타) logn

5.

루트를 삭제하는 과정을 보면 삭제한 후 힙의 특성을 회복하게 한다.
끝을 삭제해도 힙 특성이 깨지지는 않으므로 리스트상에서 삭제하면 쉽게 할수 있다.

6.

점근적인건 아니지만 
아래쪽부터 하는 이전 방식은 한번 실행될때 2번만 비교하지만
위쪽부터 하게되면 실행될 때 부모와 부모의 부모.... 와 모두 비교해야되므로 비효율적일 것 같다.

